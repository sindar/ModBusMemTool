using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO.Ports;

namespace ModbusMemTool
{

    public class ModBusRTUConnection: ModBusConnection
    {
        SerialPort _serialPort;
        byte slaveAddress;

        //public ModBusRTUConnection(string portName, int baudRate, Parity parity, int dataBits, StopBits stopBits)
        public ModBusRTUConnection(ref SerialPort mSerialPort, byte mSlaveAddress)
        {
            //_serialPort = new SerialPort(portName, baudRate, parity, dataBits, stopBits);
            _serialPort = mSerialPort;
            _serialPort.Open();
            slaveAddress = mSlaveAddress;
        }

        public override bool GetState()
        {
            return _serialPort.IsOpen;
        }

        public override void Close()
        {
            _serialPort.Close();
        }

        public override Byte[] ReadHoldingRegs(UInt16 baseRegister, UInt16 number)
        {
            if (_serialPort.IsOpen)
            {
                Byte[] transmitData = new Byte[8];
                UInt16 iCRC16;

                //--------------------------------Preparing reading query -----------
                //Byteorder: high, low
                //---------------------
                //Slave address
                transmitData[0] = slaveAddress;
                //Function code
                transmitData[1] = 0x03;

                //------Data--------
                //First register
                transmitData[2] = Convert.ToByte((baseRegister & 0xFF00) >> 8);
                transmitData[3] = Convert.ToByte(baseRegister & 0x00FF);               
                //Length
                transmitData[4] = Convert.ToByte((number & 0xFF00) >> 8);
                transmitData[5] = Convert.ToByte(number & 0x00FF);

                //CRC
                iCRC16 = CalcCRC16(transmitData, 6);
                transmitData[6] = Convert.ToByte((iCRC16 & 0xFF00) >> 8); ;
                transmitData[7] = Convert.ToByte(iCRC16 & 0x00FF); ;
                //--------------------------------Query is ready------------

                _serialPort.Write(transmitData, 0, transmitData.Length);

                return new Byte[1] { 0xFF };
            }
            else
                return null;
        }

        public override Byte[] PresetMultipleRegs(UInt16 baseRegister, UInt16 number, Byte[] presetData)
        {
           if (_serialPort.IsOpen)
            {
                Byte[] transmitData = new Byte[9 + presetData.Length];
                UInt16 dataLength;
                UInt16 iCRC16;

                //--------------------------------Preparing query for preset holding regs-----------
                //Byteorder: high, low
                //---------------------
                //Slave address
                transmitData[0] = slaveAddress;
                //Function code
                transmitData[1] = 0x10;
                //Begining register 
                transmitData[2] = Convert.ToByte((baseRegister & 0xFF00) >> 8);
                transmitData[3] = Convert.ToByte(baseRegister & 0x00FF);
                //Registers quantity
                transmitData[4] = Convert.ToByte((number & 0xFF00) >> 8);
                transmitData[5] = Convert.ToByte(number & 0x00FF);
                //Byte counter
                transmitData[6] = Convert.ToByte(presetData.Length);

                for (int i = 0; i < presetData.Length; i++)
                    transmitData[i + 7] = presetData[i];

                //CRC
                iCRC16 = CalcCRC16(transmitData, (UInt16)(transmitData.Length - 2));
                transmitData[transmitData.Length - 2] = Convert.ToByte((iCRC16 & 0xFF00) >> 8); ;
                transmitData[transmitData.Length - 1] = Convert.ToByte(iCRC16 & 0x00FF); ;
                //--------------------------------Query is ready------------

                _serialPort.Write(transmitData, 0, transmitData.Length);

                //--------------------------------Query is ready for sending------------
            }
            return new Byte[2] { 255, 255 };
        }

        public Byte[] ParseReceivedData(UInt16 ADUExpectedSize)
        {
            byte[] buff = new byte[ADUExpectedSize];
            byte[] data = new byte[ADUExpectedSize - 5];
            UInt16 iCRC16;
            UInt16 packCRC16 = 0;

            try
            {
                _serialPort.Read(buff, 0, ADUExpectedSize);
            }
            catch
            {
                return null;
            }

            //Only function 0x03 will be parsed
            if (buff[1] != 0x03)
                return null;

            iCRC16 = CalcCRC16(buff, (UInt16)(ADUExpectedSize - 2));
            packCRC16 = Convert.ToUInt16((Convert.ToInt16(buff[ADUExpectedSize - 2]) << 8) | Convert.ToInt16(buff[ADUExpectedSize - 1]));

            for (int i = 3, j = 0; i < (ADUExpectedSize - 2); ++i, ++j)
                data[j] = buff[i];

            if (buff != null)
            {
                if (iCRC16 == packCRC16)
                    return data;
                else
                    return null;
            }
            else
                return null;
        }

        #region CRC16 calculation
        byte[] auchCRCHi = new byte[256]
        {
            0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
            0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
            0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
            0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
            0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81,
            0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
            0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
            0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
            0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
            0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
            0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
            0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
            0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
            0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
            0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
            0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
            0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
            0x40
        };

        byte[] auchCRCLo = new byte[256]
        {
            0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5, 0xC4,
            0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
            0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD,
            0x1D, 0x1C, 0xDC, 0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
            0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7,
            0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
            0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE,
            0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
            0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2,
            0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F,
            0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB,
            0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
            0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90, 0x91,
            0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
            0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88,
            0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
            0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80,
            0x40
        };

        public UInt16 CalcCRC16(byte[] data, UInt16 len)
        {
            byte crc_hi;
            byte crc_lo;
            byte j;

            if (len > 256U)
            {
                return (0);
            }

            crc_hi = 0xFF;   // high byte of CRC initialized
            crc_lo = 0xFF;   // low byte of CRC initialized

            for (int i = 0; i < len; ++i)
            {
                j = (byte)(crc_hi ^ data[i]); // will index into CRC lookup table
                crc_hi = (byte)(crc_lo ^ (byte)(auchCRCHi[j]));    // calculate the CRC
                crc_lo = (byte)(auchCRCLo[j]);
            }

            return (UInt16)((crc_hi << 8) | crc_lo);
        }

        #endregion
    }
}
